<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>切图仔</title>
  
  <subtitle>野生前端程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-29T08:41:39.820Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Libo Shen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>weex学习日记：oh my zsh配置ANDROID_HOME的坑</title>
    <link href="http://yoursite.com/2018/01/29/android_home/"/>
    <id>http://yoursite.com/2018/01/29/android_home/</id>
    <published>2018-01-29T08:28:00.000Z</published>
    <updated>2018-01-29T08:41:39.820Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习weex 启动weex run android  提示找不到$ANDROID_HOME 然后我已经在.bash_profile配置了，还是报错</p></blockquote><p>  年底项目暂时不多，抽出时间提升下自己，开始学习weex。</p><p>  一些顺风顺水但是到安卓虚拟机准备跑项目的时候，提示报错找不到$ANDROID_HOME，然后去找解决方法</p><ol><li>打开终端</li><li>open ~/.bash_profile 要是没有就创建一个 touch .bash_profile</li><li><p>添加以下代码在文件里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> ANDROID_HOME=~/Library/Android/sdk</div><div class="line"><span class="comment">#我的SDK是随着android studio一起下载的 所以路径在这里，不同下载方式不同路径，可以在设置里面查找</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools:<span class="variable">$ANDROID_HOME</span>/platform-tools</div></pre></td></tr></table></figure></li><li><p>保存文件并关闭</p></li><li><p>更新下配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> .bash_profile</div></pre></td></tr></table></figure></li><li><p>命令行输入adb看是否有东西输出，如果没有出现command not found的话就基本上完事儿了。</p></li></ol><h5 id="之后坑就来了，每当我新打开一个命令行窗口，或关闭，重启后发现配置失效，打开配置文件没毛病，百思不得其解"><a href="#之后坑就来了，每当我新打开一个命令行窗口，或关闭，重启后发现配置失效，打开配置文件没毛病，百思不得其解" class="headerlink" title="之后坑就来了，每当我新打开一个命令行窗口，或关闭，重启后发现配置失效，打开配置文件没毛病，百思不得其解"></a>之后坑就来了，每当我新打开一个命令行窗口，或关闭，重启后发现配置失效，打开配置文件没毛病，百思不得其解</h5><p>google各种翻，最后确定是zsh的问题，真的是操了蛋了，最后解决方法是：</p><ul><li>找到User目录下面的.zshrc文件,打开编辑器，在文件的末尾加上<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div></pre></td></tr></table></figure></li></ul><p>这样在每次启动zsh或新建一个窗口初始化的时候  就会更新下配置环境变量<br>唯一不爽的是，配置的zsh输入提示颜色发生了点问题</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习weex 启动weex run android  提示找不到$ANDROID_HOME 然后我已经在.bash_profile配置了，还是报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  年底项目暂时不多，抽出时间提升下自己，开始学习weex。&lt;/p&gt;
&lt;p&gt;  一些顺风顺水但是到安卓虚拟机准备跑项目的时候，提示报错找不到$ANDROID_HOME，然后去找解决方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开终端&lt;/li&gt;
&lt;li&gt;open ~/.bash_profile 要是没有就创建一个 touch .bash_profile&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加以下代码在文件里&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; ANDROID_HOME=~/Library/Android/sdk&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#我的SDK是随着android studio一起下载的 所以路径在这里，不同下载方式不同路径，可以在设置里面查找&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; PATH=&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$ANDROID_HOME&lt;/span&gt;/tools:&lt;span class=&quot;variable&quot;&gt;$ANDROID_HOME&lt;/span&gt;/platform-tools&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存文件并关闭&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新下配置环境变量&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; .bash_profile&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令行输入adb看是否有东西输出，如果没有出现command not found的话就基本上完事儿了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;之后坑就来了，每当我新打开一个命令行窗口，或关闭，重启后发现配置失效，打开配置文件没毛病，百思不得其解&quot;&gt;&lt;a href=&quot;#之后坑就来了，每当我新打开一个命令行窗口，或关闭，重启后发现配置失效，打开配置文件没毛病，百思不得其解&quot; class=&quot;headerlink&quot; title=&quot;之后坑就来了，每当我新打开一个命令行窗口，或关闭，重启后发现配置失效，打开配置文件没毛病，百思不得其解&quot;&gt;&lt;/a&gt;之后坑就来了，每当我新打开一个命令行窗口，或关闭，重启后发现配置失效，打开配置文件没毛病，百思不得其解&lt;/h5&gt;&lt;p&gt;google各种翻，最后确定是zsh的问题，真的是操了蛋了，最后解决方法是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;找到User目录下面的.zshrc文件,打开编辑器，在文件的末尾加上&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ~/.bash_profile&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样在每次启动zsh或新建一个窗口初始化的时候  就会更新下配置环境变量&lt;br&gt;唯一不爽的是，配置的zsh输入提示颜色发生了点问题&lt;/p&gt;
    
    </summary>
    
      <category term="前端日记" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="WEEX" scheme="http://yoursite.com/tags/WEEX/"/>
    
  </entry>
  
  <entry>
    <title>Vue内容分发 &amp;lt;slot&amp;gt; 的使用</title>
    <link href="http://yoursite.com/2017/03/07/Vue.solt/"/>
    <id>http://yoursite.com/2017/03/07/Vue.solt/</id>
    <published>2017-03-07T09:56:00.000Z</published>
    <updated>2018-01-12T09:03:43.847Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方文档对于这一块写的比较不好理解,也有点绕弯子.<br>在这写一点个人的理解,和使用姿势…..<br><a id="more"></a></p></blockquote><p>个人对内容分发&lt;slot&gt;的理解可以看做是 占位符、标签替换、插槽<br>父组件中放入带有slot属性的内容，然后这些内容就会被分发到子组件中特殊的slot元素，根据name属性在子组件中重新组合、替换。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--父组件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--等待分发的内容--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"one"</span>&gt;</span>一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"two"</span>&gt;</span>另外一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>不带slot属性的标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--子组件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>默认替换不带slot的元素<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"one"</span>&gt;</span>会被替换成父组件中slot="one"的元素<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"two"</span>&gt;</span>会被替换成父组件中slot="two"的元素<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件自己的标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>最后会被渲染成:<br>标签的顺序是根据子组件标签的顺序排列的,自行对照<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--渲染后--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>不带slot属性的标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>另外一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件自己的标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>如果父组件内没有那个不带slot属于的p标签,  则子组件内不带name属性的 &lt;slot&gt;会显示标签内的内容,没有标签包裹.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--渲染后--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>不带slot属性的标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>另外一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件自己的标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>slot就是外部调用时会被外部替换掉，如果外部没有内容则显示自己的内容;</p><h2 id="2-1-0-新增了作用域插槽"><a href="#2-1-0-新增了作用域插槽" class="headerlink" title="2.1.0 新增了作用域插槽"></a>2.1.0 新增了<code>作用域插槽</code></h2><p>可以理解为，子组件可以将自己的数据发给父组件来处理<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--子组件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">v-for</span>=<span class="string">"val in arr"</span> <span class="attr">:text</span>=<span class="string">"val"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">data() &#123;</div><div class="line">    return &#123;</div><div class="line">        arr:[1,2,3]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--父组件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Child</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"list"</span> <span class="attr">scope</span>=<span class="string">"props"</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; props.text + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--最后渲染--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;官方文档对于这一块写的比较不好理解,也有点绕弯子.&lt;br&gt;在这写一点个人的理解,和使用姿势…..&lt;br&gt;
    
    </summary>
    
      <category term="前端日记" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue.directive自定义指令的使用</title>
    <link href="http://yoursite.com/2017/03/03/Vue.directive/"/>
    <id>http://yoursite.com/2017/03/03/Vue.directive/</id>
    <published>2017-03-03T10:16:00.000Z</published>
    <updated>2018-01-12T09:03:40.967Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很多教程都是在讲自定义指令的概念和语法,看的相当蛋疼.本文不讲语法和概念,只讲用法.<br>自定义指令基本就是用来操作DOM的,虽然官方推荐数据驱动视图,有时候还是需要自定义指令来操作DOM,指令可复用.<br><a id="more"></a></p></blockquote><h2 id="1-自定义指令实现拖拽"><a href="#1-自定义指令实现拖拽" class="headerlink" title="1. 自定义指令实现拖拽"></a>1. 自定义指令实现拖拽</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-drag</span>&gt;</span>我可以拖拽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Vue.directive(<span class="string">'drag'</span>,</div><div class="line">  inserted:<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;  <span class="comment">//inserted 钩子函数:当元素被插入父元素时触发,可省略</span></div><div class="line">    <span class="keyword">let</span> oDiv=el;  <span class="comment">//el --&gt; 触发的DOM元素</span></div><div class="line">    oDiv.onmousedown=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> l=e.clientX-oDiv.offsetLeft;</div><div class="line">        <span class="keyword">let</span> t=e.clientY-oDiv.offsetTop;</div><div class="line">        <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            oDiv.style.left=e.clientX-l+<span class="string">'px'</span>;</div><div class="line">            oDiv.style.top=e.clientY-t+<span class="string">'px'</span>;</div><div class="line">        &#125;;</div><div class="line">        oDiv.onmouseup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">document</span>.onmousemove=<span class="literal">null</span>;</div><div class="line">            oDiv.onmouseup=<span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>自定义指令还可以引入第三方插件,之前都是用JQuery来构建项目.</p><p>自定义指令的好处就是不管之前是用什么写的JQuery还好或是原生js也好都可以直接拿来封装成自定义指令,不需要重写</p><p>例如这个拖拽:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Drag.js:</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> oDiv=el;</div><div class="line">    oDiv.onmousedown=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">        <span class="keyword">let</span> l=e.clientX-oDiv.offsetLeft;</div><div class="line">        <span class="keyword">let</span> t=e.clientY-oDiv.offsetTop;</div><div class="line">        <span class="built_in">document</span>.onmousemove=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">            oDiv.style.left=e.clientX-l+<span class="string">'px'</span>;</div><div class="line">            oDiv.style.top=e.clientY-t+<span class="string">'px'</span>;</div><div class="line">        &#125;;</div><div class="line">        oDiv.onmouseup=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">document</span>.onmousemove=<span class="literal">null</span>;</div><div class="line">            oDiv.onmouseup=<span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">Vue:</div><div class="line"><span class="keyword">import</span> drag <span class="keyword">from</span> <span class="string">'drag.js'</span></div><div class="line">Vue.directive(<span class="string">'drag'</span>,drag)</div><div class="line"></div><div class="line">HTML:</div><div class="line">    &lt;div v-drag&gt;我可以拖拽&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p><h2 id="2-图片加载"><a href="#2-图片加载" class="headerlink" title="2. 图片加载"></a>2. 图片加载</h2><p>图片在加载过程中,未加载完成时,使用一个随机的颜色占位,图片加载完后直接显示,可以使用自定义指令来完成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">HTML:</div><div class="line">    &lt;img v-imgUrl=<span class="string">"url"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span>  <span class="comment">//参数不可以直接填写url地址</span></div><div class="line"></div><div class="line">    data () &#123;</div><div class="line">        url:<span class="string">'src/assets/logo.png'</span></div><div class="line">    &#125;</div><div class="line">Vue:</div><div class="line"></div><div class="line">    Vue.directive(<span class="string">'imgUrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> color=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">1000000</span>);<span class="comment">//设置随机颜色</span></div><div class="line">        el.style.backgroundColor=<span class="string">'#'</span>+color;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> img=<span class="keyword">new</span> Image();</div><div class="line">        img.src=binding.value;<span class="comment">// --&gt;binding.value指的是指令后的参数</span></div><div class="line">        img.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            el.style.backgroundColor=<span class="string">''</span>;</div><div class="line">            el.src=binding.value;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p><p>可以使用<a href="http://lodashjs.com/docs/" target="_blank" rel="external">lodash.js</a>工具库<br>vue更多的API整理–&gt;<a href="https://github.com/DrawAChicken/vue--" target="_blank" rel="external">GO</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很多教程都是在讲自定义指令的概念和语法,看的相当蛋疼.本文不讲语法和概念,只讲用法.&lt;br&gt;自定义指令基本就是用来操作DOM的,虽然官方推荐数据驱动视图,有时候还是需要自定义指令来操作DOM,指令可复用.&lt;br&gt;
    
    </summary>
    
      <category term="前端日记" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS 0.5像素线</title>
    <link href="http://yoursite.com/2017/03/03/0.5border/"/>
    <id>http://yoursite.com/2017/03/03/0.5border/</id>
    <published>2017-03-03T09:56:00.000Z</published>
    <updated>2018-01-12T09:03:46.637Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在移动端1像素的线是很丑的,而border-width设置为0.5px会被自动转成1px;<br>border-width只能为自然数;类似的属性也不可以设置0.5;<br>可以用伪元素+缩放来实现;<br><a id="more"></a></p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/3864037-d3ae9cbb1904b518.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">box</span>&#123;</div><div class="line">    <span class="attribute">position</span>:relative;    <span class="comment">/*先给元素设置定位,除了static都可以*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">::before</span>&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;    <span class="comment">/*追加一个空*/</span></div><div class="line">    <span class="attribute">position</span>: absolute;    <span class="comment">/*设置定位*/</span></div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;  <span class="comment">/*如果不设置可能会出现偏移*/</span></div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;    <span class="comment">/*设置边框*/</span></div><div class="line">    <span class="attribute">width</span>: <span class="number">200%</span>;    <span class="comment">/*设置为插入元素的两倍宽高*/</span></div><div class="line">    <span class="attribute">height</span>: <span class="number">200%</span>;</div><div class="line">    <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;    <span class="comment">/*设置元素的基点为0 0*/</span></div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.5,0.5);    <span class="comment">/*宽高缩小一半*/</span></div><div class="line">    <span class="attribute">box-sizing</span>: border-box;    <span class="comment">/*设置盒模型 这一步必须要有,否则边框不会随着一起缩放*/</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>大概思路:想元素放大2倍但是1像素的边框仍是1像素,然后再缩放时,边框随着一起缩放一半,就形成0.5像素边框</p><div class="tip"><br>    这个方法低版本浏览器会有<code>兼容问题</code>；<br>    如低版本安卓会出现transform属性不支持的情况<br>    可使用<br>    <figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">box</span>&#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</div><div class="line">    <span class="attribute">border</span>: thin solid <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>    属性thin的意思是细，比1px #ccc稍微颜色浅一点，看上去就像细了一样…<br>    还可以使用阴影、背景颜色渐变等来实现<br>    个人认为还是thin比较方便，懒人懒省事<br></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在移动端1像素的线是很丑的,而border-width设置为0.5px会被自动转成1px;&lt;br&gt;border-width只能为自然数;类似的属性也不可以设置0.5;&lt;br&gt;可以用伪元素+缩放来实现;&lt;br&gt;
    
    </summary>
    
      <category term="前端日记" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>各种For循环方法</title>
    <link href="http://yoursite.com/2017/03/02/EachFN/"/>
    <id>http://yoursite.com/2017/03/02/EachFN/</id>
    <published>2017-03-02T10:17:00.000Z</published>
    <updated>2018-01-12T09:14:08.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小白时期搞什么都是For循环，敲的不亦乐乎。<br>  然而数组Array遍历的方法有九种，面试时也多有被问到，所以分享给大家<br><a id="more"></a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// W3School : http://www.w3school.com.cn/jsref/jsref_obj_array.asp</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.indexOf();</div><div class="line"><span class="built_in">Array</span>.lastIndexOf();</div><div class="line"><span class="built_in">Array</span>.every();</div><div class="line"><span class="built_in">Array</span>.some();</div><div class="line"><span class="built_in">Array</span>.forEach();</div><div class="line"><span class="built_in">Array</span>.map();</div><div class="line"><span class="built_in">Array</span>.filter();</div><div class="line"><span class="built_in">Array</span>.reduce();</div><div class="line"><span class="built_in">Array</span>.reduceRight();</div><div class="line"><span class="keyword">for</span>-<span class="keyword">of</span>(ES6);</div></pre></td></tr></table></figure><p>  在开发中也非常实用，更高效的操作数组，本文适合新手在撸一遍，请大神轻拍。</p><hr><h2 id="1-Array-indexOf"><a href="#1-Array-indexOf" class="headerlink" title="1. Array.indexOf();"></a>1. Array.indexOf();</h2><p>  indexOf()方法返回在该数组中第一个找到的元素位置，如果它不存在则返回-1。</p><h6 id="使用for："><a href="#使用for：" class="headerlink" title="使用for："></a>使用for：</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [ <span class="string">'apple'</span> , <span class="string">'orange'</span> , <span class="string">'pear'</span> ];</div><div class="line"><span class="keyword">var</span> flag = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = arr.length; i&lt;l; i++)&#123;</div><div class="line">     <span class="keyword">if</span>(arr[i] === <span class="string">'orange'</span>)&#123;</div><div class="line">          flag = <span class="literal">true</span>;</div><div class="line">     &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(flag);</div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure><h6 id="使用Array-indexOf"><a href="#使用Array-indexOf" class="headerlink" title="使用Array.indexOf():"></a>使用Array.indexOf():</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [ <span class="string">'apple'</span> , <span class="string">'orange'</span> , <span class="string">'pear'</span> ];</div><div class="line"></div><div class="line"><span class="keyword">var</span> flag=arr.indexOf(<span class="string">'orange'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(flag != <span class="number">-1</span>);</div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure><h2 id="2-Array-lastIndexOf"><a href="#2-Array-lastIndexOf" class="headerlink" title="2. Array.lastIndexOf();"></a>2. Array.lastIndexOf();</h2><p>  和indexOf一样,从后向前查询,indexOf是从前向后查询;</p><h2 id="3-Array-every"><a href="#3-Array-every" class="headerlink" title="3. Array.every();"></a>3. Array.every();</h2><p>  检查数组中的每一项是否符合条件</p><h6 id="使用for"><a href="#使用for" class="headerlink" title="使用for:"></a>使用for:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">every</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = arr.length; i&lt;l; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(arr[i] &lt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(every(arr))</div><div class="line"><span class="comment">//false</span></div></pre></td></tr></table></figure><h6 id="使用Array-every"><a href="#使用Array-every" class="headerlink" title="使用Array.every():"></a>使用Array.every():</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> flag = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> item &gt; <span class="number">0</span></div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(flag)</div><div class="line"><span class="comment">//false</span></div></pre></td></tr></table></figure><h2 id="4-Array-some"><a href="#4-Array-some" class="headerlink" title="4. Array.some();"></a>4. Array.some();</h2><p>检查数组中的某一项是否符合条件</p><h6 id="使用for-1"><a href="#使用for-1" class="headerlink" title="使用for:"></a>使用for:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">every</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = arr.length; i&lt;l; i++)&#123;</div><div class="line">    <span class="keyword">if</span>(arr[i] &lt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(every(arr))</div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure><h6 id="使用Array-some"><a href="#使用Array-some" class="headerlink" title="使用Array.some():"></a>使用Array.some():</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> flag = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> item &lt; <span class="number">0</span></div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(flag)</div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure><h2 id="5-Array-forEach"><a href="#5-Array-forEach" class="headerlink" title="5. Array.forEach();"></a>5. Array.forEach();</h2><p>遍历数组,代替for</p><h6 id="使用for-2"><a href="#使用for-2" class="headerlink" title="使用for:"></a>使用for:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = arr.length; i &lt; l; i++)&#123;</div><div class="line">  <span class="built_in">console</span>.log(arr[i]);</div><div class="line">  <span class="comment">//1</span></div><div class="line">  <span class="comment">//2</span></div><div class="line">  <span class="comment">//3</span></div><div class="line">  <span class="comment">//.....</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h6 id="使用Array-forEach"><a href="#使用Array-forEach" class="headerlink" title="使用Array.forEach():"></a>使用Array.forEach():</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val,index,arr</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(val);<span class="comment">//1,2,3....</span></div><div class="line">    <span class="built_in">console</span>.log(index);<span class="comment">//下标</span></div><div class="line">    <span class="built_in">console</span>.log(arr);<span class="comment">//原数组</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h2 id="6-Array-map"><a href="#6-Array-map" class="headerlink" title="6. Array.map();"></a>6. Array.map();</h2><p>对数组进行操作,返回一个新数组,在处理服务器数据时经常使用</p><h6 id="使用for-3"><a href="#使用for-3" class="headerlink" title="使用for:"></a>使用for:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr2=[];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,l = arr.length; i &lt; l; i++)&#123;</div><div class="line">        arr2[i] = arr[i] + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr2;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(map(arr));</div><div class="line"><span class="comment">//2,3,4,5,6,7</span></div></pre></td></tr></table></figure><h6 id="使用Array-map"><a href="#使用Array-map" class="headerlink" title="使用Array.map():"></a>使用Array.map():</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="keyword">var</span> arr2=arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">val,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> val + <span class="number">1</span></div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(arr2)</div><div class="line"><span class="comment">//2,3,4,5,6,7</span></div></pre></td></tr></table></figure><blockquote><p>map()和forEach()的区别:<br>map()可以使用return返回一个新的数组,而forEach不可以使用return;<br>return是返回一个修改的数组的副本,对原数组没有影响;<br>两个都可以对第三个参数原数组进行修改,可以对原数组修改;</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"></div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val,index,arr</span>)</span>&#123;</div><div class="line">    arr[index] = <span class="string">"123"</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line"><span class="comment">// "123", "123", "123", "123", "123", "123"</span></div></pre></td></tr></table></figure><h2 id="7-Array-filter"><a href="#7-Array-filter" class="headerlink" title="7.   Array.filter();"></a>7.   Array.filter();</h2><p>返回一个新的匹配条件的数组</p><h6 id="使用for-4"><a href="#使用for-4" class="headerlink" title="使用for:"></a>使用for:</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">-1</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr2 = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,j = arr.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] &lt; <span class="number">0</span>)&#123;</div><div class="line">            arr2.push(arr[i])</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(filter(arr));</div><div class="line"><span class="comment">//-1</span></div></pre></td></tr></table></figure><h6 id="使用Array-filter"><a href="#使用Array-filter" class="headerlink" title="使用Array.filter():"></a>使用Array.filter():</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">-1</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr2=arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> val &lt; <span class="number">0</span>;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr2);</div><div class="line"><span class="comment">//-1</span></div></pre></td></tr></table></figure><h2 id="8-Array-reduce"><a href="#8-Array-reduce" class="headerlink" title="8. Array.reduce();"></a>8. Array.reduce();</h2><p>接受一个回调函数作为累加器,最终返回一个值.</p><blockquote><p>arr.reduce(callback[, initialValue])</p><ul><li>callback(回调函数,接收四个参数)<ul><li>previousValue(上次调用的回调函数的返回值,或初始值)</li><li>currentValue(目前正在处理的函数元素)</li><li>index(正在处理的元素下标)</li><li>array(调用reduce方法的数组)</li></ul></li><li>initialValue(可选的初始值,作为第一次使用传给previousValue)</li></ul></blockquote><p>有点晦涩难懂,看案例吧</p><p>a). 求最大数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> flag=arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> pre&gt;cur?pre:cur;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(flag)</div><div class="line"><span class="comment">//4</span></div></pre></td></tr></table></figure></p><p>b). 求和:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> flag=arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> pre+cur</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(flag)</div><div class="line"><span class="comment">//10</span></div></pre></td></tr></table></figure></p><p>c). 乘积<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="keyword">var</span> flag=arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> pre*cur</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(flag)</div><div class="line"><span class="comment">//24</span></div></pre></td></tr></table></figure></p><p>reduce就是为这种累加操作设计的,那么initialValue参数有什么用呢?<br>我理解的是用来代替previousValue成为第一个参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> flag=arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,cur,index,arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> pre+cur</div><div class="line">&#125;,<span class="number">100</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(flag)</div><div class="line"><span class="comment">//110</span></div></pre></td></tr></table></figure></p><h2 id="9-Array-reduceRight"><a href="#9-Array-reduceRight" class="headerlink" title="9.   Array.reduceRight():"></a>9.   Array.reduceRight():</h2><p>用法和参数和reduce一样,不同的是reduce是升序,而reduceRight是降序</p><h2 id="10-for-of循环-ES6"><a href="#10-for-of循环-ES6" class="headerlink" title="10. for-of循环(ES6):"></a>10. for-of循环(ES6):</h2><blockquote><p>forEach好用但是不可以中断循环<br>for-in可以遍历’enumerable’对象,不推荐用来遍历数组,数组的 index 跟普通的对象属性不一样，是重要的数值序列指标。</p></blockquote><p>for-of是ES6引入的一种新方法,比普通for循环简单,也弥补了forEach和for-in的缺点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (var value of myArray) &#123;</div><div class="line">    console.log(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>for-of可以循环很多种数据类型(数组,对象,字符串等)</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;小白时期搞什么都是For循环，敲的不亦乐乎。&lt;br&gt;  然而数组Array遍历的方法有九种，面试时也多有被问到，所以分享给大家&lt;br&gt;
    
    </summary>
    
      <category term="前端日记" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
</feed>
